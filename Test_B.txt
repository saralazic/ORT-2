100, C0 //LD 1010h
101, 00
102, 10
103, 10 

104, C1 //ST 0006, cuvam adresu prvog clana niza, first
105, 00
106, 00
107, 06 

108, C0 //LD 1000h, broj clanova niza
109, 00
10A, 10
10B, 00

10C, 87 //LSL, mnozim sa dva jer podatak zauzima dve memorijske lokacije

10D, C4 //ADD 0006h, sabiram acc sa adresom prvog podatka
10E, 00
10F, 00
110, 06 

111, C1 //ST 000Ah, simuliram sp
112, 00
113, 00
114, 0A


115, C5 //SUB #0002
116, C0
117, 00
118, 02

119, C1 //ST 0008h, cuvam adresu poslednjeg clana niza, last
11A, 00
11B, 00
11C, 08


11D, 41 // JSR QUICKSORT, skok na potprogram koji predstavlja quicksort
11E, 01
11F, 43

120, 9F //HALT


//PUSH
121, C1 //ST (000Ah)
122, 40
123, 00
124, 0A

125, C0 //LD 000Ah
126, 00
127, 00
128, 0A

129, C4 //ADD #0002 (incSP)
12A, C0
12B, 00
12C, 02

12D, C1 //ST 000Ah
12E, 00
12F, 00
130, 0A

131, 80 //RTS


//POP
132, C0 //LD 000Ah
133, 00
134, 00
135, 0A

136, C5 //SUB #0002h
137, C0
138, 00
139, 02

13A, C1 //ST 000Ah
13B, 00
13C, 00
13D, 0A

13E, C0 //LD (000Ah)
13F, 40
140, 00
141, 0A

142, 80 //RTS


//QUICKSORT(A, p, r)
143, C0 //LD 0006h
144, 00
145, 00
146, 06 

147, C5 //SUB 0008h
148, 00
149, 00
14A, 08

14B, 01 //BGRE rti, ako je low>=high nista se ne desava
14C, 77

//lokalna promenljiva first
14D, C0 //LD 0000h, cuvam sadrzaj lokacije na steku
14E, 00
14F, 00
150, 00 

151, 41 //JSR 121h (PUSH)
152, 01
153, 21

154, C0 //LD 0006h
155, 00
156, 00
157, 06

158, C1 //ST 0000h (low=first)
159, 00
15A, 00
15B, 00


//lokalna promenljiva last
15C, C0 //LD 0004h
15D, 00
15E, 00
15F, 04

160, 41 //JSR PUSH
161, 01
162, 21

163, C0 //LD 0008h
164, 00
165, 00
166, 08

167, C1 //ST 0004h (high=last)
168, 00
169, 00
16A, 04

//ADRESA PIVOTA
16B, C0 //LD 0002h
16C, 00
16D, 00
16E, 02

16F, 41 //JSR PUSH
170, 01
171, 21

172, 41 //JSR PARTITION
173, 01
174, C5


//quicksort(A, p, q-1)	
175, C0 //LD 0008h
176, 00
177, 00
178, 08

179, 41 //JSR PUSH
17A, 01
17B, 21

17C, C0 //LD 0002h 
17D, 00
17E, 00
17F, 02

180, C5 //SUB #0002h
181, C0
182, 00
183, 02

184, C1 //ST 0008h
185, 00
186, 00
187, 08

188, 41 //JSR QUICKSORT
189, 01
18A, 43

18B, 41 //JSR POP
18C, 01
18D, 32

18E, C1 //ST 0008h
18F, 00
190, 00
191, 08

//quicksort(A, q+1, r)
192, C0 //LD 0006h 
193, 00
194, 00
195, 06

196, 41 //JSR PUSH
197, 01
198, 21

199, C0 //LD 0002h 
19A, 00
19B, 00
19C, 02

19D, C4 //ADD #0002
19E, C0
19F, 00
1A0, 02

1A1, C1 //ST 0006h
1A2, 00
1A3, 00
1A4, 06

1A5, 41 //JSR QUICKSORT
1A6, 01
1A7, 43

1A8, 41 //JSR POP
1A9, 01
1AA, 32

1AB, C1 //ST 0006h
1AC, 00
1AD, 00
1AE, 06

//END

1AF, 41 //JSR POP
1B0, 01
1B1, 32

1B2, C1 //ST 0002h
1B3, 00
1B4, 00
1B5, 02

1B6, 41 //JSR POP
1B7, 01
1B8, 32

1B9, C1 //ST 0004h
1BA, 00
1BB, 00
1BC, 04

1BD, 41 //JSR POP
1BE, 01
1BF, 32

1C0, C1 //ST 0000h
1C1, 00
1C2, 00
1C3, 00

1C4, 80 //RTS


//PARTITION(A, p, r)
1C5, C0 //LD 0010h
1C6, 00 
1C7, 00
1C8, 10

1C9, 41 //JSR PUSH
1CA, 01
1CB, 21

1CC, C0 //LD (0006); 
1CD, 40 
1CE, 00
1CF, 06

1D0, C1 //ST 0010h
1D1, 00
1D2, 00
1D3, 10


//brojac i
1D4, C0 //LD 000Ch; 
1D5, 00 
1D6, 00
1D7, 0C

1D8, 41 //JSR PUSH
1D9, 01
1DA, 21

1DB, C0 //LD 0006h; 
1DC, 00 
1DD, 00
1DE, 06

1DF, C1 //ST 000Ch
1E0, 00
1E1, 00
1E2, 0C


//brojac j
1E3, C0 //LD 000Eh; 
1E4, 00 
1E5, 00
1E6, 0E

1E7, 41 //JSR PUSH
1E8, 01
1E9, 21

1EA, C0 //LD 0008h; 
1EB, 00 
1EC, 00
1ED, 08

1EE, C1 //ST 000Eh
1EF, 00
1F0, 00
1F1, 0E

//WHILE (i<j) DO
1F2, C0 //LD 000Eh; 
1F3, 00 
1F4, 00
1F5, 0E

1F6, C5 //SUB 000Ch
1F7, 00
1F8, 00
1F9, 0C

1FA, 03 //BLEQ END_WHILE
1FB, 69

//WHILE ((a[i]<=pivot) AND (i<j)) do i=i+1

1FC, C0 //LD (000Ch); 
1FD, 40 
1FE, 00
1FF, 0C

200, C5 //SUB 0010h
201, 00
202, 00
203, 10

204, 00 //BGRT END_WHILE_I
205, 19

206, C0 //LD 000Eh; 
207, 00 
208, 00
209, 0E

20A, C5 //SUB 000Ch
20B, 00
20C, 00
20D, 0C

20E, 03 //BLEQ END_WHILE_I
20F, 0F

210, C0 //LD 000Ch; 
211, 00 
212, 00
213, 0C

214, C4 //ADD #0002
215, C0
216, 00
217, 02

218, C1 //ST 000Ch
219, 00
21A, 00
21B, 0C

21C, 40 //JMP WHILE_I
21D, 01
21E, FC


//END_WHILE_I
//WHILE (a[j]>pivot) do j=j-1
21F, C0 //LD (000Eh); 
220, 40 
221, 00
222, 0E

223, C5 //SUB 0010h
224, 00
225, 00
226, 10

227, 03 //BLEQ END_WHILE_J
228, 0F

229, C0 //LD 000Eh; 
22A, 00 
22B, 00
22C, 0E

22D, C5 //SUB #0002
22E, C0
22F, 00
230, 02

231, C1 //ST 000Eh
232, 00
233, 00
234, 0E

235, 40 //JMP WHILE_J
236, 02
237, 1F

//END_WHILE_J
//IF (i<j)then a[i]<->[j]
238, C0 //LD 000Eh; 
239, 00 
23A, 00
23B, 0E

23C, C5 //SUB 000Ch
23D, 00
23E, 00
23F, 0C

240, 03 //BLEQ END_IF
241, 23

//SWAP
242, C0 //LD (000C)h; a[i]
243, 40
244, 00
245, 0C

246, C4 //ADD (000E); +a[j] 
247, 40
248, 00
249, 0E

24A, C1 //ST (000Ch); a:=a+b
24B, 40
24C, 00
24D, 0C

24E, C5 //SUB (000E);  
24F, 40
250, 00
251, 0E

252, C1 //ST (000E); b:=a-b 
253, 40
254, 00
255, 0E

256, C0 //LD (000C)h;
257, 40
258, 00
259, 0C

25A, C5 //SUB (000E);  
25B, 40
25C, 00
25D, 0E

25E, C1 //ST (000Ch); a:=a-b;
25F, 40
260, 00
261, 0C

262, 40 //JMP WHILE
263, 01
264, F2

//END_IF
//END_WHILE
265, C0 //LD (000Eh);
266, 40
267, 00
268, 0E

269, C1 //ST (0006h)
26A, 40
26B, 00
26C, 06

26D, C0 //LD 0010h; 
26E, 00 
26F, 00
270, 10

271, C1 //ST (000Eh);
272, 40
273, 00
274, 0E

275, C0 //LD 000Eh; 
276, 00 
277, 00
278, 0E

279, C1 //ST 0002h
27A, 00
27B, 00
27C, 02

27D, 41 //JSR POP
27E, 01
27F, 32

280, C1 //ST 000Eh
281, 00
282, 00
283, 0E

284, 41 //JSR POP
285, 01
286, 32

287, C1 //ST 000Ch
288, 00
289, 00
28A, 0C

28B, 41 //JSR POP
28C, 01
28D, 32

28E, C1 //ST 0010h
28F, 00
290, 00
291, 10

292, 80 //RTS

2000, 00
2001, 09

2002, 00
2003, 02

2004, 00
2005, 0D

2006, 00
2007, 03

2008, 00
2009, 08

200A, 00
200B, 05

200C, 00
200D, 07

1000, 00
1001, 07

1010, 20
1011, 00